package awslogs

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import (
	"strings"
	"time"

	jsoniter "github.com/json-iterator/go"

	"github.com/panther-labs/panther/internal/log_analysis/log_processor/pantherlog"
	"github.com/panther-labs/panther/internal/log_analysis/log_processor/pantherlog/null"
	"github.com/panther-labs/panther/internal/log_analysis/log_processor/parsers"
)

// CloudTrail is a record from the Records[*] JSON of an AWS CloudTrail API log.
// nolint:lll
type CloudTrail struct {
	AdditionalEventData *jsoniter.RawMessage    `json:"additionalEventData" description:"Additional data about the event that was not part of the request or response."`
	APIVersion          null.String             `json:"apiVersion" description:"Identifies the API version associated with the AwsApiCall eventType value."`
	AWSRegion           null.String             `json:"awsRegion" validate:"required" description:"The AWS region that the request was made to, such as us-east-2."`
	ErrorCode           null.String             `json:"errorCode" description:"The AWS service error if the request returns an error."`
	ErrorMessage        null.String             `json:"errorMessage" description:"If the request returns an error, the description of the error. This message includes messages for authorization failures. CloudTrail captures the message logged by the service in its exception handling."`
	EventID             null.String             `json:"eventID" validate:"required" description:"GUID generated by CloudTrail to uniquely identify each event. You can use this value to identify a single event. For example, you can use the ID as a primary key to retrieve log data from a searchable database."`
	EventName           null.String             `json:"eventName" validate:"required" description:"The requested action, which is one of the actions in the API for that service."`
	EventSource         null.String             `json:"eventSource" validate:"required" description:"The service that the request was made to. This name is typically a short form of the service name without spaces plus .amazonaws.com."`
	EventTime           time.Time               `json:"eventTime" validate:"required" tcodec:"rfc3339" panther:"event_time" description:"The date and time the request was made, in coordinated universal time (UTC)."`
	EventType           null.String             `json:"eventType" validate:"required" description:"Identifies the type of event that generated the event record. This can be the one of the following values: AwsApiCall, AwsServiceEvent, AwsConsoleSignIn"`
	EventVersion        null.String             `json:"eventVersion" validate:"required" description:"The version of the log event format."`
	ManagementEvent     null.Bool               `json:"managementEvent" description:"A Boolean value that identifies whether the event is a management event. managementEvent is shown in an event record if eventVersion is 1.06 or higher, and the event type is one of the following: AwsApiCall, AwsConsoleAction, AwsConsoleSignIn,  AwsServiceEvent"`
	ReadOnly            null.Bool               `json:"readOnly" description:"Identifies whether this operation is a read-only operation."`
	RecipientAccountID  null.String             `json:"recipientAccountId" panther:"aws_account_id" validate:"omitempty,len=12,numeric" description:"Represents the account ID that received this event. The recipientAccountID may be different from the CloudTrail userIdentity Element accountId. This can occur in cross-account resource access."`
	RequestID           null.String             `json:"requestID" description:"The value that identifies the request. The service being called generates this value."`
	RequestParameters   *jsoniter.RawMessage    `json:"requestParameters" description:"The parameters, if any, that were sent with the request. These parameters are documented in the API reference documentation for the appropriate AWS service."`
	Resources           []CloudTrailResources   `json:"resources" description:"A list of resources accessed in the event."`
	ResponseElements    *jsoniter.RawMessage    `json:"responseElements" description:"The response element for actions that make changes (create, update, or delete actions). If an action does not change state (for example, a request to get or list objects), this element is omitted. These actions are documented in the API reference documentation for the appropriate AWS service."`
	ServiceEventDetails *jsoniter.RawMessage    `json:"serviceEventDetails" description:"Identifies the service event, including what triggered the event and the result."`
	SharedEventID       null.String             `json:"sharedEventID" description:"GUID generated by CloudTrail to uniquely identify CloudTrail events from the same AWS action that is sent to different AWS accounts."`
	SourceIPAddress     null.String             `json:"sourceIPAddress" panther:"hostname" validate:"required" description:"The IP address that the request was made from. For actions that originate from the service console, the address reported is for the underlying customer resource, not the console web server. For services in AWS, only the DNS name is displayed."`
	UserAgent           null.String             `json:"userAgent" description:"The agent through which the request was made, such as the AWS Management Console, an AWS service, the AWS SDKs or the AWS CLI."`
	UserIdentity        *CloudTrailUserIdentity `json:"userIdentity" validate:"required" description:"Information about the user that made a request."`
	VPCEndpointID       null.String             `json:"vpcEndpointId" description:"Identifies the VPC endpoint in which requests were made from a VPC to another AWS service, such as Amazon S3."`
}

// CloudTrailResources are the AWS resources used in the API call.
type CloudTrailResources struct {
	ARN       null.String `json:"ARN" panther:"aws_arn"`
	AccountID null.String `json:"accountId" panther:"aws_account_id"`
	Type      null.String `json:"type"`
}

// CloudTrailUserIdentity contains details about the type of IAM identity that made the request.
type CloudTrailUserIdentity struct {
	Type             null.String               `json:"type"`
	PrincipalID      null.String               `json:"principalId"`
	ARN              null.String               `json:"arn" panther:"aws_arn"`
	AccountID        null.String               `json:"accountId" panther:"aws_account_id"`
	AccessKeyID      null.String               `json:"accessKeyId"`
	Username         null.String               `json:"userName"`
	SessionContext   *CloudTrailSessionContext `json:"sessionContext"`
	InvokedBy        null.String               `json:"invokedBy"`
	IdentityProvider null.String               `json:"identityProvider"`
}

// CloudTrailSessionContext provides information about a session created for temporary credentials.
type CloudTrailSessionContext struct {
	Attributes          *CloudTrailSessionContextAttributes          `json:"attributes"`
	SessionIssuer       *CloudTrailSessionContextSessionIssuer       `json:"sessionIssuer"`
	WebIDFederationData *CloudTrailSessionContextWebIDFederationData `json:"webIdFederationData"`
}

// CloudTrailSessionContextAttributes  contains the attributes of the Session context object
type CloudTrailSessionContextAttributes struct {
	MfaAuthenticated *string `json:"mfaAuthenticated"`
	CreationDate     *string `json:"creationDate"`
}

// CloudTrailSessionContextSessionIssuer contains information for the SessionContextSessionIssuer
type CloudTrailSessionContextSessionIssuer struct {
	Type        null.String `json:"type"`
	PrincipalID null.String `json:"principalId"`
	Arn         null.String `json:"arn" panther:"aws_arn"`
	AccountID   null.String `json:"accountId" panther:"aws_account_id"`
	Username    null.String `json:"userName"`
}

// CloudTrailSessionContextWebIDFederationData contains Web ID federation data
type CloudTrailSessionContextWebIDFederationData struct {
	FederatedProvider null.String          `json:"federatedProvider"`
	Attributes        *jsoniter.RawMessage `json:"attributes"`
}

// CloudTrailParser parses CloudTrail logs
type CloudTrailParser struct {
	logReader strings.Reader
	builder   pantherlog.ResultBuilder
}

var _ parsers.Interface = (*CloudTrailParser)(nil)

// Parse returns the parsed events or nil if parsing failed
func (p *CloudTrailParser) ParseLog(log string) ([]*pantherlog.Result, error) {
	p.logReader.Reset(log)
	const readBufferSize = 8192
	iter := jsoniter.Parse(jsoniter.ConfigDefault, &p.logReader, readBufferSize)
	var results []*pantherlog.Result
	for key := iter.ReadObject(); key != ""; key = iter.ReadObject() {
		if key != `Records` {
			iter.Skip()
			continue
		}
		for iter.ReadArray() {
			record := CloudTrail{}
			iter.ReadVal(&record)
			if err := iter.Error; err != nil {
				return nil, err
			}
			if err := parsers.ValidateStruct(&record); err != nil {
				return nil, err
			}
			result, _ := p.builder.BuildResult(TypeCloudTrail, &record)
			results = append(results, result)
		}
	}
	if err := iter.Error; err != nil {
		return nil, err
	}
	return results, nil
}

func (event *CloudTrail) WriteValuesTo(w pantherlog.ValueWriter) {
	(*RawMessage)(event.AdditionalEventData).WriteValuesTo(w)
	(*RawMessage)(event.ResponseElements).WriteValuesTo(w)
	(*RawMessage)(event.RequestParameters).WriteValuesTo(w)
	(*RawMessage)(event.ServiceEventDetails).WriteValuesTo(w)
}

func (d *CloudTrailSessionContextWebIDFederationData) WriteValuesTo(w pantherlog.ValueWriter) {
	(*RawMessage)(d.Attributes).WriteValuesTo(w)
}
